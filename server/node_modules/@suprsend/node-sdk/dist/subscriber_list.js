"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubscriberListsApi = exports.SubscriberListBroadcast = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _utils = require("./utils");

var _signature = _interopRequireDefault(require("./signature"));

var _axios = _interopRequireDefault(require("axios"));

var _constants = require("./constants");

var _attachment = _interopRequireDefault(require("./attachment"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var SubscriberListBroadcast = /*#__PURE__*/function () {
  function SubscriberListBroadcast(body) {
    var kwargs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2["default"])(this, SubscriberListBroadcast);

    if (!(body instanceof Object)) {
      throw new _utils.InputValueError("broadcast body must be a json/dictionary");
    }

    this.body = body;
    this.idempotency_key = kwargs === null || kwargs === void 0 ? void 0 : kwargs.idempotency_key;
    this.brand_id = kwargs === null || kwargs === void 0 ? void 0 : kwargs.brand_id;
  }

  (0, _createClass2["default"])(SubscriberListBroadcast, [{
    key: "add_attachment",
    value: function add_attachment(file_path) {
      var _kwargs$ignore_if_err, _this$body, _this$body$data;

      var kwargs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var file_name = kwargs === null || kwargs === void 0 ? void 0 : kwargs.file_name;
      var ignore_if_error = (_kwargs$ignore_if_err = kwargs === null || kwargs === void 0 ? void 0 : kwargs.ignore_if_error) !== null && _kwargs$ignore_if_err !== void 0 ? _kwargs$ignore_if_err : false;

      if (!((_this$body = this.body) !== null && _this$body !== void 0 && _this$body["data"])) {
        this.body["data"] = {};
      } // if body["data"] is not a dict, not raising error while adding attachment.


      if (!(this.body["data"] instanceof Object)) {
        console.log("WARNING: attachment cannot be added. please make sure body['data'] is a dictionary. " + "SubscriberListBroadcast" + JSON.stringify(this.as_json()));
        return;
      }

      var attachment = (0, _attachment["default"])(file_path, file_name, ignore_if_error);

      if (!attachment) {
        return;
      } //  --- add the attachment to body->data->$attachments


      if (!((_this$body$data = this.body["data"]) !== null && _this$body$data !== void 0 && _this$body$data["$attachments"])) {
        this.body["data"]["$attachments"] = [];
      } // -----


      this.body["data"]["$attachments"].push(attachment);
    }
  }, {
    key: "get_final_json",
    value: function get_final_json() {
      this.body["$insert_id"] = (0, _utils.uuid)();
      this.body["$time"] = (0, _utils.epoch_milliseconds)();

      if (this.idempotency_key) {
        this.body["$idempotency_key"] = this.idempotency_key;
      }

      if (this.brand_id) {
        this.body["brand_id"] = this.brand_id;
      }

      this.body = (0, _utils.validate_list_broadcast_body_schema)(this.body);
      var apparent_size = (0, _utils.get_apparent_list_broadcast_body_size)(this.body);

      if (apparent_size > _constants.SINGLE_EVENT_MAX_APPARENT_SIZE_IN_BYTES) {
        throw new _utils.InputValueError("SubscriberListBroadcast body too big - ".concat(apparent_size, " Bytes, must not cross ").concat(_constants.SINGLE_EVENT_MAX_APPARENT_SIZE_IN_BYTES_READABLE));
      }

      return [this.body, apparent_size];
    }
  }, {
    key: "as_json",
    value: function as_json() {
      var body_dict = _objectSpread({}, this.body);

      if (this.idempotency_key) {
        body_dict["$idempotency_key"] = this.idempotency_key;
      }

      if (this.brand_id) {
        body_dict["brand_id"] = this.brand_id;
      } // -----


      return body_dict;
    }
  }]);
  return SubscriberListBroadcast;
}();

exports.SubscriberListBroadcast = SubscriberListBroadcast;

var SubscriberListsApi = /*#__PURE__*/function () {
  function SubscriberListsApi(config) {
    (0, _classCallCheck2["default"])(this, SubscriberListsApi);
    this.config = config;
    this.subscriber_list_url = "".concat(this.config.base_url, "v1/subscriber_list/");
    this.broadcast_url = "".concat(this.config.base_url).concat(this.config.workspace_key, "/broadcast/");
    this.__headers = this.__common_headers();
    this.non_error_default_response = {
      success: true
    };
  }

  (0, _createClass2["default"])(SubscriberListsApi, [{
    key: "__common_headers",
    value: function __common_headers() {
      return {
        "Content-Type": "application/json; charset=utf-8",
        "User-Agent": this.config.user_agent
      };
    }
  }, {
    key: "__dynamic_headers",
    value: function __dynamic_headers() {
      return {
        Date: new Date().toUTCString()
      };
    }
  }, {
    key: "_validate_list_id",
    value: function _validate_list_id(list_id) {
      if (typeof list_id != "string") {
        throw new _utils.SuprsendError("list_id must be a string");
      }

      var cleaned_list_id = list_id.trim();

      if (!cleaned_list_id) {
        throw new _utils.SuprsendError("missing list_id");
      }

      return list_id;
    }
  }, {
    key: "create",
    value: function () {
      var _create = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(payload) {
        var list_id, headers, content_text, signature, response;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (payload) {
                  _context.next = 2;
                  break;
                }

                throw new _utils.SuprsendError("missing payload");

              case 2:
                list_id = payload["list_id"];

                if (list_id) {
                  _context.next = 5;
                  break;
                }

                throw new _utils.SuprsendError("missing list_id in payload");

              case 5:
                list_id = this._validate_list_id(list_id);
                payload["list_id"] = list_id;
                headers = _objectSpread(_objectSpread({}, this.__headers), this.__dynamic_headers());
                content_text = JSON.stringify(payload);
                signature = (0, _signature["default"])(this.subscriber_list_url, "POST", content_text, headers, this.config.workspace_secret);
                headers["Authorization"] = "".concat(this.config.workspace_key, ":").concat(signature);
                _context.prev = 11;
                _context.next = 14;
                return _axios["default"].post(this.subscriber_list_url, content_text, {
                  headers: headers
                });

              case 14:
                response = _context.sent;
                return _context.abrupt("return", response.data);

              case 18:
                _context.prev = 18;
                _context.t0 = _context["catch"](11);
                throw new _utils.SuprsendApiError(_context.t0);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[11, 18]]);
      }));

      function create(_x) {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "cleaned_limit_offset",
    value: function cleaned_limit_offset(limit, offset) {
      var cleaned_limit = typeof limit === "number" && limit > 0 && limit <= 1000 ? limit : 20;
      var cleaned_offset = typeof offset === "number" && offset >= 0 ? offset : 0;
      return [cleaned_limit, cleaned_offset];
    }
  }, {
    key: "get_all",
    value: function () {
      var _get_all = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var kwargs,
            limit,
            offset,
            _this$cleaned_limit_o,
            _this$cleaned_limit_o2,
            cleaned_limit,
            cleaner_offset,
            final_url_obj,
            url,
            headers,
            signature,
            response,
            _args2 = arguments;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                kwargs = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                limit = kwargs === null || kwargs === void 0 ? void 0 : kwargs.limit;
                offset = kwargs === null || kwargs === void 0 ? void 0 : kwargs.offset;
                _this$cleaned_limit_o = this.cleaned_limit_offset(limit, offset), _this$cleaned_limit_o2 = (0, _slicedToArray2["default"])(_this$cleaned_limit_o, 2), cleaned_limit = _this$cleaned_limit_o2[0], cleaner_offset = _this$cleaned_limit_o2[1];
                final_url_obj = new URL("".concat(this.config.base_url, "v1/subscriber_list"));
                final_url_obj.searchParams.append("limit", cleaned_limit);
                final_url_obj.searchParams.append("offset", cleaner_offset);
                url = final_url_obj.href;
                headers = _objectSpread(_objectSpread({}, this.__headers), this.__dynamic_headers());
                signature = (0, _signature["default"])(url, "GET", "", headers, this.config.workspace_secret);
                headers["Authorization"] = "".concat(this.config.workspace_key, ":").concat(signature);
                _context2.prev = 11;
                _context2.next = 14;
                return _axios["default"].get(url, {
                  headers: headers
                });

              case 14:
                response = _context2.sent;
                return _context2.abrupt("return", response.data);

              case 18:
                _context2.prev = 18;
                _context2.t0 = _context2["catch"](11);
                throw new _utils.SuprsendApiError(_context2.t0);

              case 21:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[11, 18]]);
      }));

      function get_all() {
        return _get_all.apply(this, arguments);
      }

      return get_all;
    }()
  }, {
    key: "__subscriber_list_detail_url",
    value: function __subscriber_list_detail_url(list_id) {
      return "".concat(this.config.base_url, "v1/subscriber_list/").concat(list_id, "/");
    }
  }, {
    key: "get",
    value: function () {
      var _get = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(list_id) {
        var cleaned_list_id, url, headers, signature, response;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                cleaned_list_id = this._validate_list_id(list_id);
                url = this.__subscriber_list_detail_url(cleaned_list_id);
                headers = _objectSpread(_objectSpread({}, this.__headers), this.__dynamic_headers());
                signature = (0, _signature["default"])(url, "GET", "", headers, this.config.workspace_secret);
                headers["Authorization"] = "".concat(this.config.workspace_key, ":").concat(signature);
                _context3.prev = 5;
                _context3.next = 8;
                return _axios["default"].get(url, {
                  headers: headers
                });

              case 8:
                response = _context3.sent;
                return _context3.abrupt("return", response.data);

              case 12:
                _context3.prev = 12;
                _context3.t0 = _context3["catch"](5);
                throw new _utils.SuprsendApiError(_context3.t0);

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[5, 12]]);
      }));

      function get(_x2) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "add",
    value: function () {
      var _add = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(list_id, distinct_ids) {
        var cleaned_list_id, url, headers, content_text, signature, response;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                cleaned_list_id = this._validate_list_id(list_id);

                if (Array.isArray(distinct_ids)) {
                  _context4.next = 3;
                  break;
                }

                throw new _utils.SuprsendError("distinct_ids must be list of strings");

              case 3:
                if (!(distinct_ids.length === 0)) {
                  _context4.next = 5;
                  break;
                }

                return _context4.abrupt("return", this.non_error_default_response);

              case 5:
                url = "".concat(this.__subscriber_list_detail_url(cleaned_list_id), "subscriber/add");
                headers = _objectSpread(_objectSpread({}, this.__headers), this.__dynamic_headers());
                content_text = JSON.stringify({
                  distinct_ids: distinct_ids
                });
                signature = (0, _signature["default"])(url, "POST", content_text, headers, this.config.workspace_secret);
                headers["Authorization"] = "".concat(this.config.workspace_key, ":").concat(signature);
                _context4.prev = 10;
                _context4.next = 13;
                return _axios["default"].post(url, content_text, {
                  headers: headers
                });

              case 13:
                response = _context4.sent;
                return _context4.abrupt("return", response.data);

              case 17:
                _context4.prev = 17;
                _context4.t0 = _context4["catch"](10);
                throw new _utils.SuprsendApiError(_context4.t0);

              case 20:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[10, 17]]);
      }));

      function add(_x3, _x4) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
  }, {
    key: "remove",
    value: function () {
      var _remove = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(list_id) {
        var distinct_ids,
            cleaned_list_id,
            url,
            headers,
            content_text,
            signature,
            response,
            _args5 = arguments;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                distinct_ids = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];
                cleaned_list_id = this._validate_list_id(list_id);

                if (Array.isArray(distinct_ids)) {
                  _context5.next = 4;
                  break;
                }

                throw new _utils.SuprsendError("distinct_ids must be list of strings");

              case 4:
                if (!(distinct_ids.length === 0)) {
                  _context5.next = 6;
                  break;
                }

                return _context5.abrupt("return", this.non_error_default_response);

              case 6:
                url = "".concat(this.__subscriber_list_detail_url(cleaned_list_id), "subscriber/remove");
                headers = _objectSpread(_objectSpread({}, this.__headers), this.__dynamic_headers());
                content_text = JSON.stringify({
                  distinct_ids: distinct_ids
                });
                signature = (0, _signature["default"])(url, "POST", content_text, headers, this.config.workspace_secret);
                headers["Authorization"] = "".concat(this.config.workspace_key, ":").concat(signature);
                _context5.prev = 11;
                _context5.next = 14;
                return _axios["default"].post(url, content_text, {
                  headers: headers
                });

              case 14:
                response = _context5.sent;
                return _context5.abrupt("return", response.data);

              case 18:
                _context5.prev = 18;
                _context5.t0 = _context5["catch"](11);
                throw new _utils.SuprsendApiError(_context5.t0);

              case 21:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[11, 18]]);
      }));

      function remove(_x5) {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
  }, {
    key: "broadcast",
    value: function () {
      var _broadcast = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(broadcast_instance) {
        var _broadcast_instance$g, _broadcast_instance$g2, broadcast_body, body_size, headers, content_text, signature, response, ok_response;

        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (broadcast_instance instanceof SubscriberListBroadcast) {
                  _context6.next = 2;
                  break;
                }

                throw new _utils.InputValueError("argument must be an instance of suprsend.SubscriberListBroadcast");

              case 2:
                _broadcast_instance$g = broadcast_instance.get_final_json(this.config), _broadcast_instance$g2 = (0, _slicedToArray2["default"])(_broadcast_instance$g, 2), broadcast_body = _broadcast_instance$g2[0], body_size = _broadcast_instance$g2[1];
                headers = _objectSpread(_objectSpread({}, this.__headers), this.__dynamic_headers());
                content_text = JSON.stringify(broadcast_body);
                signature = (0, _signature["default"])(this.broadcast_url, "POST", content_text, headers, this.config.workspace_secret);
                headers["Authorization"] = "".concat(this.config.workspace_key, ":").concat(signature);
                _context6.prev = 7;
                _context6.next = 10;
                return _axios["default"].post(this.broadcast_url, content_text, {
                  headers: headers
                });

              case 10:
                response = _context6.sent;
                ok_response = Math.floor(response.status / 100) == 2;

                if (!ok_response) {
                  _context6.next = 16;
                  break;
                }

                return _context6.abrupt("return", {
                  success: true,
                  status: "success",
                  status_code: response.status,
                  message: response.statusText
                });

              case 16:
                return _context6.abrupt("return", {
                  success: false,
                  status: "fail",
                  status_code: response.status,
                  message: response.statusText
                });

              case 17:
                _context6.next = 22;
                break;

              case 19:
                _context6.prev = 19;
                _context6.t0 = _context6["catch"](7);
                return _context6.abrupt("return", {
                  success: false,
                  status: "fail",
                  status_code: _context6.t0.status || 500,
                  message: _context6.t0.message
                });

              case 22:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[7, 19]]);
      }));

      function broadcast(_x6) {
        return _broadcast.apply(this, arguments);
      }

      return broadcast;
    }()
  }]);
  return SubscriberListsApi;
}();

exports.SubscriberListsApi = SubscriberListsApi;